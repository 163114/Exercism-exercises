object RomanNumerals {
    fun value(n: Int): String {
        val romanNumsMap: Map<Int, Char> = mapOf<Int, Char>(1000 to 'M', 500 to 'D', 100 to 'C', 50 to 'L', 10 to 'X', 5 to 'V', 1 to 'I')
        var stringToReturn: String = ""
        var remainder: Int = n
        while (remainder > 0) {
            for ((key, value) in romanNumsMap) {
                if (remainder % 10 == 9 || remainder % 5 == 4) {
                     remainder += 2
                         }
                if (remainder % 100 >= 90 && remainder <= 99 || remainder % 50 >= 40 && remainder <= 49) {
                    remainder += 20
                }
                if (remainder % 1000 >= 900 && remainder <= 999 || remainder % 500 >= 400 && remainder <= 499) {
                     remainder += 200
                         }
                repeat(remainder / key) {
                stringToReturn += value
                remainder -= key * (remainder / key)
                }
            }
        }
        return stringToReturn
    }
}


fun main() {
    println(RomanNumerals.value(1991))
    println(RomanNumerals.value(1990))
    println("Empty space")
    println(RomanNumerals.value(19))
    println(RomanNumerals.value(5))
    println(RomanNumerals.value(4))
    println(RomanNumerals.value(9))
    println(RomanNumerals.value(2000))
    println(RomanNumerals.value(2008))
}
